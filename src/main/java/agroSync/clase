create table ComposicionPiensos
(
    PiensosID     int         not null,
    IngredienteID int         not null,
    Cantidad      varchar(25) not null,
    primary key (PiensosID, IngredienteID),
    constraint ComposicionPiensos_ibfk_1
        foreign key (PiensosID) references Piensos (id),
    constraint ComposicionPiensos_ibfk_2
        foreign key (IngredienteID) references Ingredientes (id)
);
-- auto-generated definition
create table Ingredientes
(
    id                 int auto_increment
        primary key,
    Nombre             varchar(255) not null,
    CantidadInventario float        null
);

-- auto-generated definition
create table IngredientesProveedor
(
    idProveedor   int   not null,
    idIngrediente int   not null,
    precio        float null,
    primary key (idProveedor, idIngrediente),
    constraint IngredientesProveedor_ibfk_1
        foreign key (idProveedor) references Proveedores (id),
    constraint IngredientesProveedor_ibfk_2
        foreign key (idIngrediente) references Ingredientes (id)
);

create index idIngrediente
    on IngredientesProveedor (idIngrediente);

-- auto-generated definition
create table PedidosIngredientes
(
    id            int auto_increment
        primary key,
    proveedorId   int   null,
    ingredienteId int   null,
    cantidad      int   null,
    coste         float not null,
    constraint PedidosIngredientes_ibfk_1
        foreign key (ingredienteId) references Ingredientes (id),
    constraint PedidosIngredientes_ibfk_2
        foreign key (proveedorId) references Proveedores (id)
);

create table Piensos
(
    id                 int auto_increment
        primary key,
    Nombre             varchar(255) not null,
    CantidadInventario int          null
);
-- auto-generated definition
create table Proveedores
(
    id     int auto_increment
        primary key,
    nombre varchar(25) not null
);

-- auto-generated definition
create table Usuario
(
    id         int auto_increment
        primary key,
    nombre     varchar(255) not null,
    contrasena varchar(255) not null,
    permisos   varchar(255) not null
);

create
    definer = root@localhost procedure AgregarPienso(IN p_pienso_id int, IN p_cantidad_total float)
BEGIN
    -- Declaración de variables locales
    DECLARE cantidad_ingrediente float;
    DECLARE id_ingrediente INT;

	-- Declaración del cursor
    DECLARE cur_composicion CURSOR FOR
    SELECT IngredienteID, Cantidad
    FROM ComposicionPiensos
    WHERE PiensosID = p_pienso_id;

    -- Añadir cantidadTotal a la cantidadInventario del pienso
    UPDATE Piensos
    SET CantidadInventario = CantidadInventario + p_cantidad_total
    WHERE id = p_pienso_id;

    -- Apertura del cursor
    OPEN cur_composicion;
    read_loop: LOOP
        FETCH cur_composicion INTO id_ingrediente, cantidad_ingrediente;
        IF (cantidad_ingrediente IS NULL) THEN
            LEAVE read_loop;
        END IF;

        -- Actualización de la cantidadInventario del ingrediente
        UPDATE Ingredientes
        SET CantidadInventario = CantidadInventario - (cantidad_ingrediente * p_cantidad_total)
        WHERE id = id_ingrediente;
    END LOOP;
    CLOSE cur_composicion; -- Cierre del cursor
END;

create
    definer = root@localhost procedure aumentarCantidadInventario(IN p_id int, IN p_cantidad_aumentar float)
BEGIN
    DECLARE v_cantidad_actual FLOAT;

    -- Buscar la cantidad actual del ingrediente
    SELECT CantidadInventario INTO v_cantidad_actual
    FROM Ingredientes
    WHERE id = p_id;

    -- Verificar si se encontró el ingrediente
    IF v_cantidad_actual IS NOT NULL THEN
        -- Actualizar la cantidad de inventario sumando la cantidad a aumentar
        UPDATE Ingredientes
        SET CantidadInventario = CantidadInventario + p_cantidad_aumentar
        WHERE id = p_id;

        SELECT 'Cantidad de inventario actualizada correctamente' AS message;
    ELSE
        SELECT 'No se encontró un ingrediente con el ID proporcionado' AS message;
    END IF;
END;
create
    definer = root@localhost procedure verificarStock(IN p_pienso_id int, IN p_cantidad_total float,
                                                      OUT p_result tinyint(1), OUT p_map longtext)
BEGIN
    DECLARE ingrediente_id INT;
    DECLARE cantidad_necesaria FLOAT;
    DECLARE resultado FLOAT;

    DECLARE no_negativo BOOLEAN DEFAULT TRUE;
    DECLARE ingredientes_cursor CURSOR FOR
        SELECT IngredienteID, Cantidad
        FROM ComposicionPiensos
        WHERE PiensosID = p_pienso_id;

    -- Variable que contendrá el resultado del cursor
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_negativo := FALSE;

	SET p_map = JSON_ARRAY();

    -- Abrir cursor
    OPEN ingredientes_cursor;

    -- Iterar sobre los ingredientes
    ingredientes_loop: LOOP
        -- Fetch del cursor
        FETCH ingredientes_cursor INTO ingrediente_id, cantidad_necesaria;

        -- Salir del bucle si no hay más filas
        IF no_negativo = FALSE THEN
            LEAVE ingredientes_loop;
        END IF;

        -- Calcular la cantidad necesaria para no ser negativo
        SET resultado = cantidad_necesaria * p_cantidad_total;

        -- Comprobar si la cantidad en inventario es suficiente
        SELECT CantidadInventario INTO @cantidad_inventario
        FROM Ingredientes
        WHERE id = ingrediente_id;

        -- Si el resultado es negativo, calcular la cantidad necesaria
        IF (@cantidad_inventario - resultado) < 0 THEN
            SET p_map = JSON_ARRAY_APPEND(p_map, '$', JSON_OBJECT('idIngrediente', ingrediente_id, 'cantidad', -(@cantidad_inventario - resultado)));
            SET p_result = FALSE;
        END IF;
    END LOOP;

    -- Cerrar cursor
    CLOSE ingredientes_cursor;

    -- Si todos los ingredientes tienen suficiente cantidad, devolver verdadero
    IF p_result IS NULL THEN
        SET p_result = TRUE;
    END IF;
END;

