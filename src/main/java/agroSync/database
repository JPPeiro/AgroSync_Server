POSTMAN: http://localhost:8080/api/usuarios/

create database Agro_Sync;
use Agro_Sync;

-- Tablas
CREATE TABLE Usuario (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    contrasena VARCHAR(255) NOT NULL,
    permisos VARCHAR(255) NOT NULL
);
CREATE TABLE Piensos (
    id INT PRIMARY KEY auto_increment,
    Nombre VARCHAR(255) NOT NULL,
    CantidadInventario INT
);

CREATE TABLE Ingredientes (
    id INT PRIMARY KEY auto_increment,
    Nombre VARCHAR(255) NOT NULL,
	CantidadInventario INT
);

CREATE TABLE ComposicionPiensos (
    PiensosID INT,
    IngredienteID INT,
    Cantidad varchar (25) NOT NULL,
    PRIMARY KEY (PiensosID, IngredienteID),
    FOREIGN KEY (PiensosID) REFERENCES Piensos(id),
    FOREIGN KEY (IngredienteID) REFERENCES Ingredientes(id)
);

CREATE TABLE Proveedores (
    id INT auto_increment,
    nombre varchar (25) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IngredientesProveedor (
	idProveedor INT,
    idIngrediente INT,
    precio float,
	PRIMARY KEY (idProveedor, idIngrediente),
    FOREIGN KEY (idProveedor) REFERENCES Proveedores(id),
    FOREIGN KEY (idIngrediente) REFERENCES Ingredientes(id)
);

- Inserts
-- Insertar usuario con permisos "admin"
INSERT INTO Usuario (nombre, contrasena, permisos) VALUES ('admin_user', '123', 'admin');

-- Insertar usuario con permisos "prueba"
    INSERT INTO Usuario (nombre, contrasena, permisos) VALUES ('test_user', '123', 'prueba');
select * from Usuario;

-- Inserts en la tabla ComposicionPiensos
INSERT INTO ComposicionPiensos (PiensosID, IngredienteID, Cantidad) VALUES
    (1, 1, '250'),
    (1, 2, '500'),
    (2, 2, '150'),
    (2, 3, '180'),
    (3, 4, '600'),
    (3, 1, '350'),
    (4, 5, '110'),
    (4, 2, '360'),
    (5, 3, '560'),
    (5, 4, '280');
    ('Pienso10', 160);

-- Inserts en la tabla Ingredientes
INSERT INTO Ingredientes (Nombre, CantidadInventario) VALUES
    ('Ingrediente1', 500),
    ('Ingrediente2', 700),
    ('Ingrediente3', 300),
    ('Ingrediente4', 450),
    ('Ingrediente5', 600);

-- Inserts en la tabla ComposicionPiensos
INSERT INTO ComposicionPiensos (PiensosID, IngredienteID) VALUES
    (1, 1),
    (1, 2),
    (2, 2),
    (2, 3),
    (3, 4),
    (3, 1),
    (4, 5),
    (4, 2),
    (5, 3),
    (5, 4);

INSERT INTO Proveedores (nombre) VALUES ('Proveedor A');
INSERT INTO Proveedores (nombre) VALUES ('Proveedor B');
INSERT INTO Proveedores (nombre) VALUES ('Proveedor C');

INSERT INTO IngredientesProveedor (idProveedor, idIngrediente, precio) VALUES
    (1, 1, 10.50),  -- Proveedor A suministra Ingrediente1
    (1, 2, 15.75),  -- Proveedor A suministra Ingrediente2
    (2, 3, 8.20),   -- Proveedor B suministra Ingrediente3
    (2, 4, 12.00),  -- Proveedor B suministra Ingrediente4
    (3, 5, 20.00);  -- Proveedor C suministra Ingrediente5

- Procedimientos
DELIMITER //

CREATE PROCEDURE obtener_usuarios()
BEGIN
    SELECT id, nombre, contrasena, permisos FROM Usuario;
END //

DELIMITER ;
DELIMITER //

CREATE PROCEDURE obtener_piensos()
BEGIN
    SELECT * FROM Pienso;
END //

DELIMITER ;
DELIMITER //

CREATE PROCEDURE obtener_composiciones()
BEGIN
    SELECT * FROM ComposicionPiensos;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE obtener_ingredientes()
BEGIN
    SELECT * FROM Ingredientes;
END //

DELIMITER ;

CREATE PROCEDURE obtener_proveedores()
BEGIN
    SELECT * FROM Proveedores;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE obtener_ingredientes_proveedor()
BEGIN
    SELECT * FROM IngredientesProveedor;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE AgregarPienso(IN p_pienso_id INT, IN p_cantidad_total INT)
BEGIN
    -- Declaración de variables locales
    DECLARE cantidad_ingrediente INT;
    DECLARE id_ingrediente INT;

	-- Declaración del cursor
    DECLARE cur_composicion CURSOR FOR
    SELECT IngredienteID, Cantidad
    FROM ComposicionPiensos
    WHERE PiensosID = p_pienso_id;

    -- Añadir cantidadTotal a la cantidadInventario del pienso
    UPDATE Piensos
    SET CantidadInventario = CantidadInventario + p_cantidad_total
    WHERE id = p_pienso_id;

    -- Apertura del cursor
    OPEN cur_composicion;
    read_loop: LOOP
        FETCH cur_composicion INTO id_ingrediente, cantidad_ingrediente;
        IF (cantidad_ingrediente IS NULL) THEN
            LEAVE read_loop;
        END IF;

        -- Actualización de la cantidadInventario del ingrediente
        UPDATE Ingredientes
        SET CantidadInventario = CantidadInventario - (cantidad_ingrediente * p_cantidad_total)
        WHERE id = id_ingrediente;
    END LOOP;
    CLOSE cur_composicion; -- Cierre del cursor
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE verificarStock(
    IN p_pienso_id INT,
    IN p_cantidad_total INT,
    OUT p_result BOOLEAN,
    OUT p_map JSON
)
BEGIN
    DECLARE ingrediente_id INT;
    DECLARE cantidad_necesaria INT;
    DECLARE resultado INT;

    DECLARE no_negativo BOOLEAN DEFAULT TRUE;
    DECLARE ingredientes_cursor CURSOR FOR
        SELECT IngredienteID, Cantidad
        FROM ComposicionPiensos
        WHERE PiensosID = p_pienso_id;

    -- Variable que contendrá el resultado del cursor
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_negativo := FALSE;

	SET p_map = JSON_ARRAY();

    -- Abrir cursor
    OPEN ingredientes_cursor;

    -- Iterar sobre los ingredientes
    ingredientes_loop: LOOP
        -- Fetch del cursor
        FETCH ingredientes_cursor INTO ingrediente_id, cantidad_necesaria;

        -- Salir del bucle si no hay más filas
        IF no_negativo = FALSE THEN
            LEAVE ingredientes_loop;
        END IF;

        -- Calcular la cantidad necesaria para no ser negativo
        SET resultado = cantidad_necesaria * p_cantidad_total;

        -- Comprobar si la cantidad en inventario es suficiente
        SELECT CantidadInventario INTO @cantidad_inventario
        FROM Ingredientes
        WHERE id = ingrediente_id;

        -- Si el resultado es negativo, calcular la cantidad necesaria
        IF @cantidad_inventario - resultado < 0 THEN
            SET p_map = JSON_ARRAY_APPEND(p_map, '$', JSON_OBJECT('idIngrediente', ingrediente_id, 'cantidad', -(@cantidad_inventario - resultado)));
            SET p_result = FALSE;
        END IF;
    END LOOP;

    -- Cerrar cursor
    CLOSE ingredientes_cursor;

    -- Si todos los ingredientes tienen suficiente cantidad, devolver verdadero
    IF p_result IS NULL THEN
        SET p_result = TRUE;
    END IF;
END//

DELIMITER ;

CALL verificarStock(1, 1, @p_result, @p_map);
SELECT @p_result AS p_result, @p_map AS p_map;

select * from Ingredientes;
